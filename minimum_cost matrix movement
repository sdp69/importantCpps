#include <bits/stdc++.h>
#define fl(a, b, c) for(int i = a; i < b; i+=c)
using namespace std;

int min_cost2(int **input, int ei, int ej){
  int **dp = new int*[ei];
  fl(0, ei+1, 1)
  {
    dp[i] = new int[ej];
  }
  dp[ei][ej] = input[ei][ej];
  for(int i = ei-1; i >= 0; i--){ // for the rows filling
    dp[i][ej] = dp[i+1][ej] + input[i][ej];
  }
  for(int j = ej - 1; j >= 0; j--){ //for filiing the columns
    dp[ei][j] = dp[ei][j+1] + input[ei][j];
  }
  for(int i = ei - 1; i >= 0; i--){
    for(int j = ej - 1; j >= 0; j--){
      dp[i][j] = input[i][j] + min(dp[i+1][j], min(dp[i+1][j+1], dp[i][j+1]));
    }
  }
  return dp[0][0];
}

int min_cost(int **arr, int si, int ei, int sj, int ej, int **arr2){
  if(si == ei && ej == sj)
    return arr[ei][ej];
  if(si > ei || sj > ej)
    return INT_MAX;
  if(arr2[si][sj] > -1)
    return arr2[si][sj];
  int option1 = min_cost(arr, si+1, ei, sj, ej, arr2);
  int option2 = min_cost(arr, si, ei, sj+1, ej, arr2);
  int option3 = min_cost(arr, si+1, ei, sj+1, ej, arr2);
  arr2[si][sj] = arr[si][sj] + min(option3, min(option2, option1));
  return arr2[si][sj];
}

int main() 
{
    int **arr;
     arr = new int*[3];
    for(int i = 0; i < 3; i++){
     arr[i] = new int[3];
    }
    arr[0][0] = 4; 
    arr[0][1] = 3;
    arr[0][2] = 2;
    arr[1][0] = 1;
    arr[1][1] = 8;
    arr[1][2] = 9;
    arr[2][0] = 1;
    arr[2][1] = 1;
    arr[2][2] = 8;
    int **arr2;
     arr2 = new int*[3];
    for(int i = 0; i < 3; i++){
     arr2[i] = new int[3];
    }
    arr2[0][0] = -1; 
    arr2[0][1] = -1;
    arr2[0][2] = -1;
    arr2[1][0] = -1;
    arr2[1][1] = -1;
    arr2[1][2] = -1;
    arr2[2][0] = -1;
    arr2[2][1] = -1;
    arr2[2][2] = -1;
    cout << min_cost(arr, 0, 2, 0, 2, arr2) << '\n';
    cout << min_cost2(arr, 2, 2);
    return 0;
}
